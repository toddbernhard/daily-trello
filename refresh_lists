#!/usr/bin/env python

from client import Client
from boards import get_or_create_board as get_board
from lists  import get_or_create_list as get_list
from pprint import pprint
from cards  import * 
from files  import load_config, get_list_files, load_routine
from datetime import datetime

def get_now():
  now = datetime.now()
  if now.hour <= 6:
    now = 'morning'
  elif now.hour <= 12:
    now = 'noon'
  else:
    now = 'night'
  now = 'morning'
  return now

def filter_now(tasks):

  now = get_now()

  tasks = list(filter(lambda x: (now in x['time']), tasks))

  def is_scheduled_daily(now, task):
    if task['schedule_option']['interval'] < 2:
      return True
    else:
      days = (now - datetime.utcfromtimestamp(0)).days
      if (days + task['schedule_option']['offset']) % (task['schedule_option']['interval']) == 0:
        return True
      else:
        return False

  def is_scheduled_weekly(now, task):
    weekdays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday']
    day = weekdays[now.weekday()]
    return day in task['schedule_option']

  def is_scheduled(now, task):
    if task['schedule'] == 'daily':
      return is_scheduled_daily(now, task)
    elif task['schedule'] == 'weekly':
      return is_scheduled_weekly(now, task)

  tasks = list(filter(lambda x: is_scheduled(datetime.now(), x), tasks))

  return tasks
    
def list_minus_list(list_a, list_b):
  c = []
  for a in list_a:
    exists = False

    for b in list_b:
      if a['name'] == b['name']:
        exists = True
        break

    if not exists:
      c.append(a)

  return c


print("#######  Daily Trello  #######\n")

username = load_config()['username']
board_name = load_config()['default_board']
print("----- username: " + username)
print("----- date: " + str(datetime.now()))
print("----- default board: " + board_name)

print("\nresolving board id")
bid = get_board(username, board_name)
print("----- board id: " + bid)

cl = Client()

task_lists = dict()

# get lists
list_files = get_list_files()
print("\n----- files found:")
pprint(list_files)

for list_file in list_files:
  next_list = load_routine(list_file)
  #print("next_list:")
  #pprint(next_list)

  now = get_now()
  if now in next_list['refresh_time']:
    next_list['tasks'] = filter_now(next_list['tasks'])
    #print("after filter:")
    #pprint(next_list['tasks'])
    task_lists[next_list['name']] = next_list['tasks']
  

print("\n----- loaded lists:")
pprint(task_lists)

    
for name, tasks in task_lists.items():
  print("")
  print(name)
  lid = get_list(bid, name)
  cards = get_cards(lid)
  pprint(list(map(lambda x: {'name': x['name'], 'pos': x['pos']}, cards)))

  new_tasks = list_minus_list(tasks, cards)
  old_cards = list_minus_list(cards, tasks)
  current_cards = list_minus_list(cards, old_cards)

  for task in new_tasks:
    get_or_create_card(lid, task['name'])
    print("new task " + task['name'])

  for card in old_cards:
    close_card(card['id'])
    print("old cards " + card['name'])

  for card in current_cards:
    print("current card " + card['name'])
    if card['closed']:
      open_card(card['id'])

  


print("\ncheck cards")
for card in get_cards(get_list(bid, "Morning")):
  print("# " + card['name'] + " :: " + card['id'])


print("\n")
